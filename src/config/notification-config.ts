/**
 * Notification Configuration
 *
 * This module exports notification-related configuration settings.
 */
import {envOrArray, envOrBoolean, envOrNumber, envOrString} from './env-utils';

/**
 * Configuration for all notification services
 */
export const notifications = {
  desktop: process.env.DESKTOP_NOTIFICATIONS === 'true',
  apns: {
    apnsAuthKey: envOrString(process.env.APNS_AUTHKEY),
    apnsKeyId: envOrString(process.env.APNS_KEYID),
    apnsTeamId: envOrString(process.env.APNS_TEAMID),
    apnsProduction: envOrBoolean(process.env.APNS_PRODUCTION),
    apnsDeviceToken: envOrString(process.env.APNS_DEVICETOKEN),
    apnsBundleId: envOrString(process.env.APNS_BUNDLEID),
  },
  discord: {
    notifyGroup: envOrArray(process.env.DISCORD_NOTIFY_GROUP),
    notifyGroupSeries: {
      arc: envOrArray(process.env.DISCORD_NOTIFY_GROUP_ARC),
      'a3-matx': envOrArray(process.env.DISCORD_NOTIFY_GROUP_A3_MATX),
      3050: envOrArray(process.env.DISCORD_NOTIFY_GROUP_3050),
      3060: envOrArray(process.env.DISCORD_NOTIFY_GROUP_3060),
      '3060ti': envOrArray(process.env.DISCORD_NOTIFY_GROUP_3060TI),
      3070: envOrArray(process.env.DISCORD_NOTIFY_GROUP_3070),
      '3070ti': envOrArray(process.env.DISCORD_NOTIFY_GROUP_3070TI),
      3080: envOrArray(process.env.DISCORD_NOTIFY_GROUP_3080),
      '3080ti': envOrArray(process.env.DISCORD_NOTIFY_GROUP_3080TI),
      3090: envOrArray(process.env.DISCORD_NOTIFY_GROUP_3090),
      4060: envOrArray(process.env.DISCORD_NOTIFY_GROUP_4060),
      4070: envOrArray(process.env.DISCORD_NOTIFY_GROUP_4070),
      '4070super': envOrArray(process.env.DISCORD_NOTIFY_GROUP_4070SUPER),
      '4070ti': envOrArray(process.env.DISCORD_NOTIFY_GROUP_4070TI),
      '4080-16g': envOrArray(process.env.DISCORD_NOTIFY_GROUP_4080_16G),
      4090: envOrArray(process.env.DISCORD_NOTIFY_GROUP_4090),
      5070: envOrArray(process.env.DISCORD_NOTIFY_GROUP_5070),
      '5070ti': envOrArray(process.env.DISCORD_NOTIFY_GROUP_5070TI),
      5080: envOrArray(process.env.DISCORD_NOTIFY_GROUP_5080),
      5090: envOrArray(process.env.DISCORD_NOTIFY_GROUP_5090),
      'captcha-deterrent': [],
      darkhero: envOrArray(process.env.DISCORD_NOTIFY_GROUP_DARKHERO),
      rx6700xt: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RX6700XT),
      rx6800: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RX6800),
      rx6800xt: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RX6800XT),
      rx6900xt: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RX6900XT),
      ryzen5600: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN5600),
      ryzen5800: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN5800),
      ryzen5900: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN5900),
      ryzen5950: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN5950),
      ryzen7800x3d: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN7800X3D),
      ryzen7950X: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN7950X),
      ryzen9800x3d: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN9800X3D),
      ryzen9600x: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN9600X),
      ryzen9700x: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN9700X),
      ryzen9900x: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN9900X),
      ryzen9950x: envOrArray(process.env.DISCORD_NOTIFY_GROUP_RYZEN9950X),
      sf: envOrArray(process.env.DISCORD_NOTIFY_GROUP_CORSAIR_SF),
      sonyps5c: envOrArray(process.env.DISCORD_NOTIFY_GROUP_SONYPS5C),
      sonyps5de: envOrArray(process.env.DISCORD_NOTIFY_GROUP_SONYPS5DE),
      'test:series': envOrArray(process.env.DISCORD_NOTIFY_GROUP_TEST),
      xboxss: envOrArray(process.env.DISCORD_NOTIFY_GROUP_XBOXSS),
      xboxsx: envOrArray(process.env.DISCORD_NOTIFY_GROUP_XBOXSX),
    },
    webhooks: envOrArray(process.env.DISCORD_WEB_HOOK),
  },
  email: {
    password: envOrString(process.env.EMAIL_PASSWORD),
    smtpAddress: envOrString(process.env.SMTP_ADDRESS),
    smtpPort: envOrNumber(process.env.SMTP_PORT, 25),
    to: envOrString(process.env.EMAIL_TO, envOrString(process.env.EMAIL_USERNAME)),
    username: envOrString(process.env.EMAIL_USERNAME),
  },
  gotify: {
    priority: envOrNumber(process.env.GOTIFY_PRIORITY),
    token: envOrString(process.env.GOTIFY_TOKEN),
    url: envOrString(process.env.GOTIFY_URL),
  },
  mqtt: {
    broker: envOrString(process.env.MQTT_BROKER_ADDRESS),
    clientId: envOrString(process.env.MQTT_CLIENT_ID),
    password: envOrString(process.env.MQTT_PASSWORD),
    port: envOrNumber(process.env.MQTT_BROKER_PORT, 1883),
    qos: envOrNumber(process.env.MQTT_QOS, 0),
    topic: envOrString(process.env.MQTT_TOPIC, 'streetmerchant/alert'),
    username: envOrString(process.env.MQTT_USERNAME),
  },
  pagerduty: {
    integrationKey: envOrString(process.env.PAGERDUTY_INTEGRATION_KEY),
    severity: envOrString(process.env.PAGERDUTY_SEVERITY, 'info'),
  },
  philips_hue: {
    accessToken: envOrString(process.env.PHILIPS_HUE_CLOUD_ACCESS_TOKEN),
    apiKey: envOrString(process.env.PHILIPS_HUE_API_KEY),
    bridgeIp: envOrString(process.env.PHILIPS_HUE_LAN_BRIDGE_IP),
    clientId: envOrString(process.env.PHILIPS_HUE_CLOUD_CLIENT_ID),
    clientSecret: envOrString(process.env.PHILIPS_HUE_CLOUD_CLIENT_SECRET),
    lightColor: envOrString(process.env.PHILIPS_HUE_LIGHT_COLOR),
    lightIds: envOrString(process.env.PHILIPS_HUE_LIGHT_IDS),
    lightPattern: envOrString(process.env.PHILIPS_HUE_LIGHT_PATTERN),
    refreshToken: envOrString(process.env.PHILIPS_HUE_CLOUD_REFRESH_TOKEN),
    remoteApiUsername: envOrString(process.env.PHILIPS_HUE_API_KEY),
  },
  phone: {
    availableCarriers: new Map([
      ['att', 'txt.att.net'],
      ['attgo', 'mms.att.net'],
      ['bell', 'txt.bell.ca'],
      ['fido', 'fido.ca'],
      ['google', 'msg.fi.google.com'],
      ['koodo', 'msg.koodomobile.com'],
      ['mint', 'mailmymobile.net'],
      ['rogers', 'pcs.rogers.com'],
      ['sprint', 'messaging.sprintpcs.com'],
      ['telus', 'msg.telus.com'],
      ['tmobile', 'tmomail.net'],
      ['uscc', 'mms.uscc.net'],
      ['verizon', 'vtext.com'],
      ['virgin', 'vmobl.com'],
      ['virgin-ca', 'vmobile.ca'],
      ['visible', 'vtext.com'],
    ]),
    carrier: envOrArray(process.env.PHONE_CARRIER),
    number: envOrArray(process.env.PHONE_NUMBER),
  },
  playSound: envOrString(process.env.PLAY_SOUND),
  pushbullet: envOrString(process.env.PUSHBULLET),
  pushover: {
    expire: envOrNumber(process.env.PUSHOVER_EXPIRE),
    priority: envOrNumber(process.env.PUSHOVER_PRIORITY),
    retry: envOrNumber(process.env.PUSHOVER_RETRY),
    sound: envOrString(process.env.PUSHOVER_SOUND, 'pushover'),
    token: envOrString(process.env.PUSHOVER_TOKEN),
    username: envOrString(process.env.PUSHOVER_USER),
    device: envOrString(process.env.PUSHOVER_DEVICE),
  },
  redis: {
    url: envOrString(process.env.REDIS_URL),
  },
  slack: {
    channel: envOrString(process.env.SLACK_CHANNEL),
    token: envOrString(process.env.SLACK_TOKEN),
  },
  soundPlayer: envOrString(process.env.SOUND_PLAYER),
  telegram: {
    accessToken: envOrString(process.env.TELEGRAM_ACCESS_TOKEN),
    chatId: envOrArray(process.env.TELEGRAM_CHAT_ID),
  },
  twilio: {
    accountSid: envOrString(process.env.TWILIO_ACCOUNT_SID),
    authToken: envOrString(process.env.TWILIO_AUTH_TOKEN),
    from: envOrString(process.env.TWILIO_FROM_NUMBER),
    to: envOrString(process.env.TWILIO_TO_NUMBER),
  },
  twitch: {
    accessToken: envOrString(process.env.TWITCH_ACCESS_TOKEN),
    channel: envOrString(process.env.TWITCH_CHANNEL),
    clientId: envOrString(process.env.TWITCH_CLIENT_ID),
    clientSecret: envOrString(process.env.TWITCH_CLIENT_SECRET),
    refreshToken: envOrString(process.env.TWITCH_REFRESH_TOKEN),
  },
  twitter: {
    accessTokenKey: envOrString(process.env.TWITTER_ACCESS_TOKEN_KEY),
    accessTokenSecret: envOrString(process.env.TWITTER_ACCESS_TOKEN_SECRET),
    consumerKey: envOrString(process.env.TWITTER_CONSUMER_KEY),
    consumerSecret: envOrString(process.env.TWITTER_CONSUMER_SECRET),
    tweetTags: envOrString(process.env.TWITTER_TWEET_TAGS),
  },
  streamlabs: {
    accessToken: envOrString(process.env.STREAMLABS_ACCESS_TOKEN),
    type: envOrString(process.env.STREAMLABS_TYPE),
    imageHref: envOrString(process.env.STREAMLABS_IMAGE),
    soundHref: envOrString(process.env.STREAMLABS_SOUND),
    duration: envOrNumber(process.env.STREAMLABS_DURATION),
  },
  freemobile: {
    id: envOrString(process.env.FREEMOBILE_ID),
    apiKey: envOrString(process.env.FREEMOBILE_API_KEY),
  },
  ntfy: {
    url: envOrString(process.env.NTFY_URL, 'https://ntfy.sh'),
    topic: envOrString(process.env.NTFY_TOPIC),
    priority: envOrString(process.env.NTFY_PRIORITY),
    title: envOrString(process.env.NTFY_TITLE),
    accessToken: envOrString(process.env.NTFY_ACCESS_TOKEN),
  },
};
