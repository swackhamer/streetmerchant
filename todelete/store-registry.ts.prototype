/**
 * Store Registry - Centralized store configuration management
 * 
 * This file implements a data-driven approach to store configuration
 * instead of having separate files for each store. This significantly
 * reduces code duplication and makes maintenance easier.
 */
import {Store} from './store';
import {
  createStandardStore,
  createEuropeanStore,
  createMarketplaceStore,
  StoreFactoryOptions
} from './common/store-factory';
import {commonLabels} from './common/label-sets';

/**
 * Extended options to help with store categorization
 */
export interface ExtendedStoreOptions extends StoreFactoryOptions {
  storeType: 'standard' | 'european' | 'marketplace';
}

/**
 * Store registry containing all store configurations
 */
export const storeRegistry: Record<string, ExtendedStoreOptions> = {
  'amazon': {
    name: 'amazon',
    country: 'US',
    currency: '$',
    storeType: 'marketplace',
    labels: {
      captcha: {
        container: 'body',
        text: ['enter the characters you see below'],
      },
      captchaHandler: {
        challenge: '.a-row > img',
        input: '#captchacharacters',
        submit: 'button[type="submit"]',
      },
      inStock: [
        {
          container: '#add-to-cart-button',
          text: ['add to cart'],
        },
        {
          container: '#buy-now-button',
          text: ['buy now'],
        },
      ],
      maxPrice: {
        container: '.a-offscreen',
      },
    },
    backoffStatusCodes: [403, 429, 503],
  },
  
  'bestbuy': {
    name: 'bestbuy',
    country: 'US',
    currency: '$',
    storeType: 'standard',
    labels: {
      inStock: {
        container: '.fulfillment-add-to-cart-button',
        text: ['add to cart'],
      },
      outOfStock: {
        container: 'button.c-button.c-button-disabled[data-button-state="SOLD_OUT]',
        text: ['coming soon'],
      },
      maxPrice: {
        container: '.priceView-price',
      },
    },
  },
  
  'newegg': {
    name: 'newegg',
    country: 'US',
    currency: '$',
    storeType: 'standard',
    labels: {
      inStock: {
        container: '.product-buy-box:not(.product-buy-box-retired)',
        text: ['add to cart'],
      },
      maxPrice: {
        container: '.product-price > li:nth-child(3)',
      },
    },
  },
  
  'alternate-de': {
    name: 'alternate-de',
    country: 'DE',
    currency: 'â‚¬',
    storeType: 'european',
    labels: {
      inStock: {
        container: '#add-to-cart button[disabled]',
        text: ['in den warenkorb'],
      },
      outOfStock: {
        container: '.stockStatus',
        text: ['ausverkauft'],
      },
      maxPrice: {
        container: '.price',
        euroFormat: true,
      },
    },
  },
  
  // Add more stores following the same pattern...
};

/**
 * Creates a store instance from the registry
 */
export function createStoreFromRegistry(storeName: string): Store {
  const config = storeRegistry[storeName];
  if (!config) {
    throw new Error(`Store "${storeName}" not found in registry`);
  }
  
  // Choose the correct factory based on store type
  switch (config.storeType) {
    case 'marketplace':
      return createMarketplaceStore(config);
    case 'european':
      return createEuropeanStore(config);
    case 'standard':
    default:
      return createStandardStore(config);
  }
}

/**
 * Gets all configured store names
 */
export function getAllStoreNames(): string[] {
  return Object.keys(storeRegistry);
}

/**
 * Gets stores by country
 */
export function getStoresByCountry(country: string): string[] {
  return Object.entries(storeRegistry)
    .filter(([_, config]) => config.country === country)
    .map(([name, _]) => name);
}

/**
 * Creates a store instance with all options but overriding some fields
 */
export function createStoreWithOverrides(
  storeName: string, 
  overrides: Partial<StoreFactoryOptions>
): Store {
  const config = storeRegistry[storeName];
  if (!config) {
    throw new Error(`Store "${storeName}" not found in registry`);
  }
  
  const mergedConfig = {
    ...config,
    ...overrides,
    // Special handling for nested objects like labels
    labels: overrides.labels 
      ? {...config.labels, ...overrides.labels} 
      : config.labels
  };
  
  // Choose the correct factory based on store type
  switch (config.storeType) {
    case 'marketplace':
      return createMarketplaceStore(mergedConfig);
    case 'european':
      return createEuropeanStore(mergedConfig);
    case 'standard':
    default:
      return createStandardStore(mergedConfig);
  }
}